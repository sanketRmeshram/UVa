#include <bits/stdc++.h>
using namespace std;
//11904 - One Unit Machine
#define ff first
#define ss second
#define mp(a,b) make_pair(a,b)
#define pb(a) push_back(a)
#define boost ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)
#define check(x) cout << #x << " : " << (x) << endl
#define inf LLONG_MAX
#define all(v) v.begin(),v.end() 
#define allr(v) v.rbegin(),v.rend() 
#define endl '\n'  
#define mod 1000000007
typedef  long long ll; 
typedef  unsigned long long ull; 
//using u64 = uint64_t;  // Only SPOJ AND CodeChef
//using u128 = __uint128_t;
typedef vector<ll> edge;
typedef pair< ll , ll > mypair;
typedef priority_queue <ll> max_heap;
typedef priority_queue <ll, vector<ll>, greater<ll> > min_heap;
const ll N=1000000+100;
ll mod_expo(ll a,ll b, ll c)
{
	ll ans=1;
	while(b)
	{
		if(b & (ll)1) ans=(ans*a)%c;
		a=(a*a)%c;
		b=b>>1;
	}
	return ans;
}

ll inverse(ll n, ll c)
{
	return mod_expo(n,c-2,c);
}
int main()
{
	boost;
	ll fac[N];
	fac[0]=1;
	for(ll i=1;i<N;i++) fac[i]=(fac[i-1]*i)%mod;
	ll t;
	cin>>t;
	ll cas=1;
	while(t--) // idea fix last , then ditribute remaing a-1 of last in previous arrangement x1+x2 ...+ xs+x(s+1) = a-1
	{
		ll n;
		cin>>n;
		ll ans=1;
		ll sum=0;
		while(n--) // ans[i]=ncr(sum+a-1,sum)*ans[i-1] 
		{
			ll a;
			cin>>a;
			ans=(ans*fac[sum+a-1])%mod;
			ans=(ans*inverse(fac[sum],mod))%mod;
			ans=(ans*inverse(fac[a-1],mod))%mod;
			sum+=a;
		}
		cout<<"Case "<<cas<<": ";
		cout<<ans<<endl;
		cas++;
	}
	return 0;

}
